   precision mediump float;

   // Declare the light rack
    uniform vec3   lights[32];   // X,Y,Z @ world space  
    uniform vec3  lColors[32];   // Red, Green, Blue
    uniform vec3   lAtten[32];   // Constant term, Linear term, Quadratic term
    uniform  int     lightCnt;

    uniform vec3           eyePosition;   // This is where the camera is located

    uniform sampler2D       texSampler;
    uniform sampler2D    normalSampler;
    uniform sampler2D      dispSampler;
    
    varying   vec4         fragmentPos;       // Contains the fragment world position in VIEW_SPACE
    varying   vec2          fragmentUV;
    varying   vec3       surfaceNormal;
    varying   vec3     surfaceBinormal;
    varying   vec3      surfaceTangent;
    
    void main(void) 
    {
          vec2 texCoords      = vec2(fragmentUV.s, fragmentUV.t);
          vec3 fragPos        = vec3(fragmentPos);
   
          vec4 fragVector     = texture2D( normalSampler, texCoords );    // This should hopefully contain the normal [x,y,z,0] in its own space
               fragVector    *= 2.0;
               fragVector    -= vec4( 1.0,1.0,1.0,0.0);                   // Convert the encoded normal [0,1] to [-1,-1]
            
          vec3 tNormal        = fragVector.x * surfaceTangent + fragVector.y * surfaceBinormal + fragVector.z * surfaceNormal;
        
          float total_R       = 0.0;                     // ATTENTION. Colored lights require component wise operation! This is for white light only!
          float total_G       = 0.0;
          float total_B       = 0.0;
        
          vec3 rgb;
       
        // Generate the illumination for each light. Highest scalars win.
        for( int i = 0; i < 16; i++ )  // Arbitrarily large index to scam the shader into "infinite" loop. Thx glsl for being flexible.
        {
            if( i == lightCnt ) break;
            
            vec3 light                = lights[i];
            vec3 color                = lColors[i];
            
            vec3 pixelToLight         = light - fragPos;    // Vector from pixel to light source
            vec3 lightVector          = normalize( pixelToLight );
            float dist2Light          = length( pixelToLight );         // Could be optimized....
             
            float cosAngle            = dot( lightVector , tNormal ); 
                  cosAngle            = clamp( cosAngle, 0.0, 1.0 );
              
            float constant_Term       = 0.5;
            float linear_Term         = 0.010;
            float quadratic_Term      = 0.00005;
            float attenuation         = 1.0 / ( constant_Term + dist2Light*linear_Term + dist2Light*dist2Light*quadratic_Term );
            
            float multiplier_R        = ( cosAngle * attenuation );
            float multiplier_G        = ( cosAngle * attenuation );
            float multiplier_B        = ( cosAngle * attenuation );
            
            total_R                   = max( multiplier_R, total_R );
            total_G                   = max( multiplier_G, total_G );
            total_B                   = max( multiplier_B, total_B );
            
            rgb                       = color;
        }
        
            
           
      
        vec4 color    = texture2D( texSampler, texCoords );   // Diffuse
        
             color.r = clamp( ( color.r * ( total_R )  ), 0.0, 1.0 ); ;
             color.g = clamp( ( color.g * ( total_G )  ), 0.0, 1.0 ); ;
             color.b = clamp( ( color.b * ( total_B )  ), 0.0, 1.0 ); ;
        
    gl_FragColor  = color;
    }